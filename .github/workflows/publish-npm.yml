name: Publish to NPM

on:
  # Trigger on version tags (e.g., v1.0.0, v1.2.3-beta.1)
  push:
    tags:
      - 'v*'

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for creating GitHub releases
      id-token: write # Required for NPM provenance

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.9.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        run: pnpm run build

      - name: Run tests
        run: pnpm run test

      - name: Extract version from tag
        id: version
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          echo "version=$TAG" >> $GITHUB_OUTPUT
          echo "Publishing version: $TAG"

      - name: Check if prerelease
        id: prerelease
        run: |
          if [[ "${{ steps.version.outputs.version }}" =~ (alpha|beta|rc|next) ]]; then
            echo "tag=next" >> $GITHUB_OUTPUT
            echo "This is a prerelease"
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "This is a stable release"
          fi

      - name: Publish to NPM
        run: |
          # Publish only packages whose versions don't exist on NPM yet
          # This allows independent package versioning

          PUBLISHED_COUNT=0
          SKIPPED_COUNT=0
          FAILED_COUNT=0

          echo "🔍 Checking packages for publishing..."

          for pkg in packages/*/package.json; do
            if [ ! -f "$pkg" ]; then
              continue
            fi

            PKG_DIR=$(dirname "$pkg")
            PKG_NAME=$(node -p "require('./$pkg').name" 2>/dev/null || echo "unknown")
            PKG_VERSION=$(node -p "require('./$pkg').version" 2>/dev/null || echo "unknown")

            # Skip if not an @agenteract package
            if [[ ! "$PKG_NAME" =~ ^@agenteract/ ]]; then
              continue
            fi

            # Sanitize package name for log file (replace / and @ with -)
            LOG_NAME=$(echo "$PKG_NAME" | tr '/@' '--')

            echo ""
            echo "📦 Checking $PKG_NAME@$PKG_VERSION..."

            # Check if version exists on NPM
            if npm view "$PKG_NAME@$PKG_VERSION" version 2>/dev/null; then
              echo "   ⏭️  Already exists on NPM, skipping"
              SKIPPED_COUNT=$((SKIPPED_COUNT + 1))
              continue
            fi

            echo "   📤 Publishing to NPM..."
            cd "$PKG_DIR"

            # Capture output and exit code
            if pnpm publish --access public --tag ${{ steps.prerelease.outputs.tag }} --provenance --no-git-checks > /tmp/npm-publish-${LOG_NAME}.log 2>&1; then
              echo "   ✅ Published successfully"
              PUBLISHED_COUNT=$((PUBLISHED_COUNT + 1))
            else
              # Check if it failed because it already exists (race condition)
              if grep -q "cannot publish over the previously published versions" /tmp/npm-publish-${LOG_NAME}.log 2>/dev/null; then
                echo "   ⏭️  Already published (race condition), skipping"
                SKIPPED_COUNT=$((SKIPPED_COUNT + 1))
              else
                echo "   ❌ Failed to publish"
                cat /tmp/npm-publish-${LOG_NAME}.log
                FAILED_COUNT=$((FAILED_COUNT + 1))
              fi
            fi

            cd - > /dev/null
          done

          echo ""
          echo "──────────────────────────────────────"
          echo "📊 Publishing Summary:"
          echo "   ✅ Published: $PUBLISHED_COUNT"
          echo "   ⏭️  Skipped: $SKIPPED_COUNT"
          echo "   ❌ Failed: $FAILED_COUNT"
          echo "──────────────────────────────────────"

          if [ $FAILED_COUNT -gt 0 ]; then
            echo "❌ Some packages failed to publish"
            exit 1
          fi

          if [ $PUBLISHED_COUNT -eq 0 ] && [ $SKIPPED_COUNT -eq 0 ]; then
            echo "⚠️  No packages found to publish"
            exit 1
          fi

          echo "✅ Publishing complete!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            const tag = context.ref.replace('refs/tags/', '');
            const isPrerelease = tag.includes('alpha') || tag.includes('beta') || tag.includes('rc');
            
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: `Release ${tag}`,
              body: `Published to NPM with tag: ${{ steps.prerelease.outputs.tag }}`,
              draft: false,
              prerelease: isPrerelease
            });

